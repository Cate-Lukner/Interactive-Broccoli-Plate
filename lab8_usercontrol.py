# Imports
import random
import arcade

# Sets constant screen width and height
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 600
# Constant Movement Speed for plate, arm, and broccoli
MOVEMENT_SPEED = 3

def draw_table(x, y):
    """ Draws table with wooden top and a red and white
    tablecloth"""

    # Wooden Table Top
    texture = arcade.load_texture("images/wood.jpg")
    arcade.draw_texture_rectangle(
        x, y, SCREEN_WIDTH,
        SCREEN_HEIGHT, texture
        )

    # Tablecloth
    texture = arcade.load_texture("images/tablecloth.jpg")
    scale = 0.6
    arcade.draw_texture_rectangle(
        x, y, scale * texture.width,
        scale * texture.height, texture
        )


class Plate:
    """Constains variables and methods associated with
    the plate figure of the screen that can be moved
    with the arrow keys by the user along with the
    broccoli and arm"""

    def __init__(self, x, y, dx, dy):
        """Initalizer"""

        self.x = x
        self.y = y 
        self.dx = dx
        self.dy = dy

    def draw(self):
        """ Draws white plate that will hold the broccoli
        The plate will be made up of two circles, each one
        a slightly differnt color from the other. The plate
        will have an outline and shading as well. """
        # Plate Outer Shading
        arcade.draw_circle_filled(
            self.x, self.y, 205, (0, 0, 0, 90)
            )

        # Plate White circles
        arcade.draw_circle_filled(
            self.x, self.y, 200, arcade.color.WHITE
            )
        arcade.draw_circle_filled(
            self.x, self.y, 150, (250, 250, 250)
            )

        # outer outline of the plate
        arcade.draw_circle_outline(
            self.x, self.y, 200, arcade.color.BLACK, 3
            )

        # inner outline of the plate
        arcade.draw_circle_outline(
            self.x, self.y, 150, arcade.color.BLACK, 3
            )

        # shading for inner plate
        arcade.draw_circle_outline(
            self.x, self.y, 147, (0, 0, 0, 90), 3
            )

    def update(self):
        """Allows the plate to move within a range
        in the window"""

        # Incrementing by dx or dy
        self.y += self.dy
        self.x += self.dx
        
        # Boundaries for the plate movement
        if self.x < 207:
            self.x = 207

        if self.x > SCREEN_WIDTH - 150:
            self.x = SCREEN_WIDTH - 150

        if self.y < 153:
            self.y = 153

        if self.y > SCREEN_HEIGHT - 153:
            self.y = SCREEN_HEIGHT - 153

        # Debugging Print Statement
        print("For the Plate: self.x, self.y = ", self.x, self.y)  


# List of different colors of greens for broccoli florets
GREENS = [
    (123, 179, 109),
    (57, 130, 39),
    (21, 89, 4),
    (69, 112, 58),
    (57, 84, 50),
    (36, 97, 20),
]

class Broccoli:
    """ This Broccoli class contains every method associated
    with drawing the Broccoli. The broccoli florets are
    generated by 150 circles of a random point within
    the radius of the x and y coordinate, random size,
    and a random green from the GREEN  list above. The
    broccoli stalk is created from a rectangle filled with
    a texture. An ellipse and circle constitute the shading
    of the broccoli. The broccoli is controlled by the user
    with the arrow keys and moves at the same time as the
    plate and arm. """

    # Broccoli initializer method
    def __init__(self, x, y, dx, dy, radius):
        """Initializer"""

        self.x = x
        self.y = y 
        self.dx = dx
        self.dy = dy
        self.branches = []

        # creates random traits for the dots that
        # make up the broccoli branches
        for i in range(150):
            dx = random.randint(-radius, radius)
            dy = random.randint(-radius, radius)
            self.branches.append(
                (dx, dy,
                 random.randint(3, 7),
                 random.choice(GREENS))
            )

        # Importing sound that will play when user
        # hits the boundary
        self.dont_steal_broccoli = arcade.load_sound(
            "sounds/dont_steal_broccoli.mp3"
            )

    # Broccoli "branches"/florets
    def draw_broccoli_branches(self):
        offset_x, offset_y = 15, 20
        for (dx, dy, size, color) in self.branches:
            x, y = self.x + dx + offset_x, self.y + dy + offset_y
            arcade.draw_circle_filled(x, y, size, color)

    # Broccoli Shading
    def draw_broccoli_shading(self):
        # shading for the broccoli
        x, y = self.x, self.y
        arcade.draw_circle_filled(x + 40, y + 30, 45, (0, 0, 0, 5))
        arcade.draw_ellipse_filled(
            x, y + 10, 45, 35,
            (0, 0, 0, 5), 30,
        )

    # Broccoli Stalk
    def draw_broccoli_texture(self):
        x, y = self.x, self.y
        broccoli_texture = arcade.load_texture("images/broccoli_stem.jpg")
        arcade.draw_texture_rectangle(
            x - 10, y + 5, 45, 35,
            broccoli_texture, 30
            )
    
    # Point of Reference
    def draw_point(self):
        arcade.draw_point(self.x, self.y, (255, 0, 0), 10)

    # Draws all parts of the broccoli
    def draw(self):
        self.draw_point()
        self.draw_broccoli_shading()
        self.draw_broccoli_texture()
        self.draw_broccoli_branches()

    def update(self):
        """ Allows the broccoli to move by increments of dx, dy
        and within the boundary. Plays "Don't you dare steal that
        broccoli" whenever the user hits the boundary. """

        # Incements x, y by dx, dy
        self.y += self.dy
        self.x += self.dx
        
        # Sets Boundary
        if self.x < 197:
            self.x = 197
            arcade.play_sound(self.dont_steal_broccoli)

        if self.x > SCREEN_WIDTH - 160:
            self.x = SCREEN_WIDTH - 160
            arcade.play_sound(self.dont_steal_broccoli)

        if self.y < 147:
            self.y = 147
            arcade.play_sound(self.dont_steal_broccoli)

        if self.y > SCREEN_HEIGHT - 163:
            self.y = SCREEN_HEIGHT - 163
            arcade.play_sound(self.dont_steal_broccoli)

        print("For the broccoli: self.x, self.y = ", self.x, self.y)  



class Arm:
    """Contains the attributes and methods associated with
    the arm that the user controls with the arrow keys."""

    def __init__(self, x, y, dx, dy, rotation):
        """ Initializer function """ 

        self.x = x
        self.y = y 
        self.dx = dx
        self.dy = dy
        self.rotation = rotation
    
    def draw(self):
        """ Draws a simple rectangle with a skin texture
        to make up the arm that will be drawn under the plate 
        to look as if the arm is holding the plate""" 

        # Arm
        texture = arcade.load_texture("images/skin.jpg")
        arcade.draw_texture_rectangle(
            self.x, self.y, 0.6 * texture.width,
            0.2 * texture.height, texture, self.rotation
            )

    def update(self):
        """Allows the arm to move by increments of dx, dy
        within a boundary."""

        # Increments x, y by dx, dy
        self.y += self.dy
        self.x += self.dx

        # Sets Boundary
        if self.x < 470:
            self.x = 470

        if self.x > SCREEN_WIDTH + 100:
            self.x = SCREEN_WIDTH + 100

        if self.y < 250:
            self.y = 250

        if self.y > SCREEN_HEIGHT - 55:
            self.y = SCREEN_HEIGHT - 55

        # Debugging print statement
        print("For the arm: self.x, self.y = ", self.x, self.y)  

class Fly:
    """ Contains the attributes and methods
    associated with the fly that the user controls
    with their mouse. """

    def __init__(self, x, y, dx, dy):
        """Initializer"""

        self.x = x
        self.y = y 
        self.dx = dx
        self.dy = dy

    def draw(self):
        """Draws the fly with a black body and
        two white wings."""

        arcade.draw_ellipse_filled(
                    self.x, self.y, 10, 15,
                    (0, 0, 0), 15
                )
        arcade.draw_ellipse_filled(
            self.x + 10, self.y + 10, 7, 5, 
            (255, 255, 255, 200), 60
        )
        arcade.draw_ellipse_filled(
            self.x - 10, self.y, 7, 5, 
            (255, 255, 255, 200), 50
        )


class MyGame(arcade.Window):
    """ Window class for my game. """

    def __init__(self, width, height, title):
        """ Initializer function that calls the 
        initalizer function of the arcade.Window
        class, sets the mouse to invisible, and 
        creates instances of the objects that the
        user will control on the screen. """

        # calls Window class's constructor function
        super().__init__(width, height, title)

        # Sets the mouse to invisible
        self.set_mouse_visible(False)

        # Creates instance of arm object
        self.arm = Arm(
            550, 400, # x, y
            0, 0, # dx, dy
            30 # rotation
            )

        # Creates instance of plate object
        self.plate = Plate(
            300, 300, # x, y
            0, 0, # dx, dy
            ) 

        # Creates instance of broccli object
        self.broccoli = Broccoli(
            290, 290, # x, y
            0, 0, # dx, dy
            25, # radius
            )
        
        # Creates instance of fly object
        self.fly = Fly(20, 20, 0, 0)

        # Loads sound that will play when user left clicks
        self.looks_good = arcade.load_sound(
            "sounds/broccoli_looking_good.mp3"
            )


    def on_draw(self):
        """Draws all the objects in the window"""

        draw_table(300, 300)

        self.arm.draw()
        self.plate.draw()
        self.broccoli.draw()
        self.fly.draw()
    
    def on_mouse_motion(self, x, y, dx, dy):
        """ Causes the fly to move along with the user's
        mouse. """
        self.fly.x = x
        self.fly.y = y

    def on_mouse_press(self, x, y, button, modifiers):
        """Called when the user presses a mouse button.
        Plays the "looks_good" sound when they left click."""

        if button == arcade.MOUSE_BUTTON_LEFT:
            arcade.play_sound(self.looks_good)

    def update(self, delta_time):
        """Updates the arm, plate, and broccoli by
        calling their individual update methods."""
        
        self.arm.update()
        self.plate.update()
        self.broccoli.update()       

    def on_key_press(self, key, modifiers):
        """Called whenever the user presses a key.
        Assigns keys to directions the user moves
        the arm, plate, and broccoli at a uniform
        movement speed."""

        # Left arrow key
        if key == arcade.key.LEFT:
            self.arm.dx = -MOVEMENT_SPEED
            self.plate.dx = -MOVEMENT_SPEED
            self.broccoli.dx = -MOVEMENT_SPEED
        # Right arrow key
        elif key == arcade.key.RIGHT:
            self.arm.dx = MOVEMENT_SPEED
            self.plate.dx = MOVEMENT_SPEED
            self.broccoli.dx = MOVEMENT_SPEED
        # Down arrow key
        elif key == arcade.key.DOWN:
            self.arm.dy = -MOVEMENT_SPEED
            self.plate.dy = -MOVEMENT_SPEED
            self.broccoli.dy = -MOVEMENT_SPEED
        # Up arrow key
        elif key == arcade.key.UP:
            self.arm.dy = MOVEMENT_SPEED
            self.plate.dy = MOVEMENT_SPEED
            self.broccoli.dy = MOVEMENT_SPEED
         
    def on_key_release(self, key, modifiers):
        """ Called whenever a user releases a key. Sets dx and
        dy to zero when the user releases the arrow keys. """

        # Left and Right arrow keys
        if key == arcade.key.LEFT or key == arcade.key.RIGHT:
            self.arm.dx = 0
            self.plate.dx = 0
            self.broccoli.dx = 0

        # Up and down arrow keys
        elif key == arcade.key.UP or key == arcade.key.DOWN:
            self.arm.dy = 0
            self.plate.dy = 0
            self.broccoli.dy = 0

def main():
    """ Main Function. Creates and instance of the window
    and runs arcade. """
    window = MyGame(
        SCREEN_WIDTH, SCREEN_HEIGHT, 
        "Admire the Broccoli"
    )
    arcade.run()

# Calls the main funciton
if __name__ == "__main__":
    main()